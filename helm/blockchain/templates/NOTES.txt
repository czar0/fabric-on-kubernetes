1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range .Values.ingress.hosts }}
    http://{{ . }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
    export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ template "blockchain.fullname" . }})
    export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
    echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status by running 'kubectl get svc -w {{ template "blockchain.fullname" . }}'
    export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template "blockchain.fullname" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
    echo http://$SERVICE_IP:{{ .Values.service.externalPort }}
{{- else if contains "ClusterIP" .Values.service.type }}
    export CA_POD=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app={{ template "blockchain.name" . }},release={{ .Release.Name }},name={{ template "blockchain.name" . }}-ca" -o jsonpath="{.items[0].metadata.name}")
    echo "Visit http://127.0.0.1:8080 to use your application"
    kubectl port-forward $CA_POD 8080:{{ .Values.service.externalPort }}
{{- end }}

2. Next, create a channel and have your peers join by running these commands (NOTE: The script is doing this automatically):
    export PEER1ORG1_POD=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app={{ template "blockchain.name" . }},release={{ .Release.Name }},name={{ template "blockchain.name" . }}-org1peer1" -o jsonpath="{.items[0].metadata.name}")
    export PEER1ORG2_POD=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app={{ template "blockchain.name" . }},release={{ .Release.Name }},name={{ template "blockchain.name" . }}-org2peer1" -o jsonpath="{.items[0].metadata.name}")
   
    kubectl exec --namespace {{ .Release.Namespace }} $PEER1ORG1_POD -- peer channel create -o blockchain-orderer:31010 -c mychannel -f /shared/mychannel.tx
    kubectl exec --namespace {{ .Release.Namespace }} $PEER1ORG1_POD -- peer channel fetch config /shared/mychannel.block -c mychannel -o blockchain-orderer:31010

    kubectl exec --namespace {{ .Release.Namespace }} $PEER1ORG1_POD -- peer channel join -b /shared/mychannel.block
    kubectl exec --namespace {{ .Release.Namespace }} $PEER1ORG2_POD -- peer channel join -b /shared/mychannel.block

3. Grab CLI pod name and copy the chaincode into it
    export CLI_POD=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app={{ template "blockchain.name" . }},release={{ .Release.Name }},name={{ template "blockchain.name" . }}-cli" -o jsonpath="{.items[0].metadata.name}")
    kubectl exec --namespace {{ .Release.Namespace }} $CLI_POD -- bash -c "mkdir -p /opt/gopath/src"
    export chaincode_path=<set here your chaincode path>
    kubectl cp --namespace {{ .Release.Namespace }} $chaincode_path ${CLI_POD}:/opt/gopath/src/chaincode 1>/dev/null
    
4. Execute commands from the CLI to install and instatiate the chaincode
    export channel_name=<set here your channel id>
    kubectl exec --namespace {{ .Release.Namespace }} $CLI_POD -- bash -c "peer chaincode install -n $chaincode_name -v 1.0 -p chaincode/${chaincode_name}"
    kubectl exec --namespace {{ .Release.Namespace }} $CLI_POD -- bash -c "peer chaincode instantiate -n $chaincode_name -v 1.0 -C $channel_name -o blockchain-orderer:31010 -l golang -c '<specify your args for init fuction in json format>' -P \"OR('Org1MSP.member', 'Org2MSP.member')\" "

5. Commands to run invokes and queries
    kubectl exec --namespace {{ .Release.Namespace }} $CLI_POD -- bash -c "peer chaincode invoke -o blockchain-orderer:31010 -C $channel_name -n $chaincode_name -c '<put here your args in json format>'"
    kubectl exec --namespace {{ .Release.Namespace }} $CLI_POD -- bash -c "peer chaincode query -o blockchain-orderer:31010 -C $channel_name -n $chaincode_name -c '<put here your query in json format>'"